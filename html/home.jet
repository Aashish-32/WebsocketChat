<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" 
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
    integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" 
    crossorigin="anonymous" referrerpolicy="no-referrer" />

<style> 
.chatbox {
outline: 1px solid silver;
padding: 0.6em;
min-height: 160px;
}
</style>

</head>

<body>
<div class="container">
<div class="row">
<div class="col">
<h1 class="mt-3">Welcome to Chat Room</h1>
<hr>

</div>
</div>
<div class="row">
<div class="col-md-8">
    <h3>Chat</h3>

    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" name="username" id="username" class="form-control">

    </div>

     <div class="form-group">
        <label for="message">Message</label>
        <input type="text" name="message" id="message" class="form-control">

    </div>
    <hr>

    <a href="javascript:void(0);" class="btn btn-outline-primary" id="sendButton" >Send Message</a>

    <input type="hidden" name="action" id="action">

   <div id="status" class="mt-2 float-end"> </div>

    <div id="output" class="chatbox mt-3">

    </div>

</div> 

<div class="col-md-4">
    <h3>Who's Online</h3>
    <ul id="online_users">
        <li>abc</li>

    </ul>
</div>

</div>

</div>

</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
        crossorigin="anonymous"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" 
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        
    <!-- <script src="/static/reconnecting-websocket.min.js"></script> -->
<script>
    let o= document.getElementById("output");
    let userField= document.getElementById("username")
    let messageField= document.getElementById("message")
    let socket = null;
    

    window.onbeforeunload= ()=>{  //alternatively can use window.addeventlistener("beforeunload", ...)
console.log("close")
    let jsondata={};
    jsondata["action"]="left";
    socket.send(JSON.stringify(jsondata))

    }
    
document.addEventListener("DOMContentLoaded", function () {

     socket = new WebSocket("ws://127.0.0.1:8080/ws")
    
     const offline= `<span class="badge bg-danger">Not Connected</span>`
     const online= `<span class="badge bg-success">Not Connected</span>`
     let statusDiv= document.getElementById("status")

socket.onopen = () => {
    statusDiv.innerHTML=online
    console.log("websocket connected succesfully") ;

}
    
socket.onclose = () => {
    statusDiv.innerHTML=offline
     console.log("connection closed");
        }

        socket.onerror = error => {
            console.log("there was an error");
        }

socket.onmessage = msg => {
            
            let data = JSON.parse(msg.data);
            console.log("Action is ", data.action) ;
            console.log("message is", data.message);

            switch (data.action) {
                case "list_users":
                    let ul= document.getElementById("online_users");
                    while(ul.firstChild) ul.removeChild(ul.firstChild); 

                    if (data.connected_users.length >0) {

                        data.connected_users.forEach(item => {
                        let li= document.createElement("li") ;  
                        li.appendChild(document.createTextNode(item)); //imp
                        ul.appendChild(li)

                    } )

                }
                break;

                case "broadcast":
                    o.innerHTML= o.innerHTML + data.message + "<br>";
                    
                    break;



            }
        }
                
        
        userField.addEventListener("change", function(){
            let jsonData={} ;
            jsonData["action"]="username" ;
            jsonData["username"]= this.value ;
            socket.send(JSON.stringify(jsonData)) ;
        })

        messageField.addEventListener("keydown", (event)=>{
            if (event.key ==="Enter") {
                event.stopPropagation();
                event.preventDefault();
                if(!socket) {
                    console.log("no connection")
                    return false
                }

           

            if (userField.value=="" || messageField.value==""){
             validationMessage("username and message cannot be empty");
             return false;
        } else {
           
            sendMessage();
        }

            }

        })


      document.getElementById("sendButton").addEventListener("click", ()=>{
        

        if (userField.value=="" || messageField.value==""){
             validationMessage("User and Message cannot be empty");
             return false;
        } else {
            sendMessage();
        }



      })
  
})

function sendMessage() {
    let jsonData={}
    jsonData["action"]="broadcast";
    jsonData["username"]= userField.value ;
    jsonData["message"]= messageField.value;
    socket.send(JSON.stringify(jsonData))
     messageField.value=""

}

function validationMessage(message){
    notie.alert({
  type: 'error',  // 'success', 'warning', , 'info', 'neutral'
  text: message,
  time:2,


})
}
 
</script>
</html>

